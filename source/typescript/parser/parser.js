import {buildParserMemoryBuffer, loadWASM }  from "@candlefw/hydrocarbon";        
import Lexer from "@candlefw/wind"; 

const debug_stack = [];
const { shared_memory, action_array, error_array } = buildParserMemoryBuffer(false, 4194304, 163920);

const data = (str=>{const out = new Uint8Array(str.length>>1); for(let i = 0; i < str.length; i+=2) {out[i>>1] = parseInt(str.slice(i, i+2),16);} return out; })(
"0061736d01000000012c0860027f7f017f60017f017f60017f0060027f7f0060037f7f7f0060037f7f7f017f60000060047f7f7f7f00021c0203656e760561626f7274000703656e76066d656d6f727902014964032c2b03030406010004000001040305"
+"000102000101020305010101010402050000000000000000000000000102061d057f0141000b7f0141000b7f0141000b7f0141000b7f004190b2a1020b074807066d656d6f72790200055f5f6e65770009075f5f72656e6577000e085f5f72657461696e"
+"000f095f5f72656c6561736500100b5f5f727474695f626173650304046d61696e002a0ab0342b9b0201047f20012802002202410171450440410041f0b1a102419002410e1000000b2002417c71220241fcffffff034941002002410c4f1b4504404100"
+"41f0b1a102419202410e1000000b200241800249044020024104762102052002411f2002676b220341046b764110732102200341076b21030b2002411049410020034117491b450440410041f0b1a102419f02410e1000000b2001280208210420012802"
+"0422050440200520043602080b20040440200420053602040b20012000200220034104746a4102746a2802604604402000200220034104746a4102746a20043602602004450440200020034102746a2204280204417e2002777121012004200136020420"
+"0145044020002000280200417e200377713602000b0b0b0b8b0401077f2001450440410041f0b1a10241c801410e1000000b20012802002204410171450440410041f0b1a10241ca01410e1000000b200141046a2001280200417c716a22052802002202"
+"41017104402004417c7141046a2002417c716a220341fcffffff03490440027f200020051001200120032004410371722204360200200141046a2001280200417c716a22052802000b21020b0b20044102710440027f200141046b280200220328020022"
+"07410171450440410041f0b1a10241df0141101000000b2007417c7141046a2004417c716a220841fcffffff0349047f20002003100120032008200741037172220436020020030520010b0b21010b200520024102723602002004417c71220341fcffff"
+"ff034941002003410c4f1b450440410041f0b1a10241ee01410e1000000b2003200141046a6a2005470440410041f0b1a10241ef01410e1000000b200541046b2001360200200341800249044020034104762103052003411f2003676b220441046b7641"
+"10732103200441076b21060b2003411049410020064117491b450440410041f0b1a10241ff01410e1000000b2000200320064104746a4102746a2802602104200141003602042001200436020820040440200420013602040b2000200320064104746a41"
+"02746a200136026020002000280200410120067472360200200020064102746a220020002802044101200374723602040bda0101027f200120024b0440410041f0b1a10241fc02410e1000000b200141136a41707141046b210120024170712103200028"
+"02a00c220204402001200241046a490440410041f0b1a10241830341101000000b2002200141106b460440027f20022802002104200141106b0b21010b052001200041a40c6a490440410041f0b1a10241900341051000000b0b200320016b2202411449"
+"04400f0b20012004410271200241086b22024101727236020020014100360204200141003602082002200141046a6a22024102360200200020023602a00c2000200110020b9f0101027f3f00220041c90048047f41c90020006b40004100480541000b04"
+"40000b41c0b2a102410036020041e0bea1024100360200034020014117490440200141027441c0b2a1026a410036020441002100034020004110490440200020014104746a41027441c0b2a1026a4100360260200041016a21000c010b0b200141016a21"
+"010c010b0b41c0b2a10241e4bea1023f00411074100341c0b2a10224000b3300200041fcffffff034f044041f0b0a10241f0b1a10241cd03411e1000000b410c200041136a41707141046b2000410c4d1b0be00101017f20014180024904402001410476"
+"210105411f20014101411b2001676b746a41016b2001200141feffffff01491b2201676b21022001200241046b764110732101200241076b21020b2001411049410020024117491b450440410041f0b1a10241cd02410e1000000b200020024102746a28"
+"0204417f200174712201047f200020016820024104746a4102746a280260052000280200417f200241016a74712201047f200020016822014102746a2802042202450440410041f0b1a10241da0241121000000b200020026820014104746a4102746a28"
+"02600541000b0b0b8c0101027f20012802002103200241046a410f710440410041f0b1a10241e802410e1000000b2003417c7120026b220441104f0440200120022003410271723602002002200141046a6a2201200441046b4101723602002000200110"
+"020520012003417e71360200200141046a22002001280200417c716a20002001280200417c716a280200417d713602000b0bc60101027f20002001100522021006220145044041043f00220141107441046b20002802a00c477420024101411b2002676b"
+"7441016b6a2002200241feffffff01491b6a41ffff036a4180807c71411076210320012003200120034a1b40004100480440200340004100480440000b0b200020014110743f0041107410032000200210062201450440410041f0b1a10241f203411010"
+"00000b0b20022001280200417c714b0440410041f0b1a10241f403410e1000000b200020011001200020012002100720010b6001027f200041ecffffff034b044041f0b0a10241b0b1a102419302411e1000000b200041106a2102230045044010040b23"
+"002002100841046a220341046b22024100360204200241003602082002200136020c20022000360210200341106a0b3a01017f200041046b21012000410f7145410020001b047f2001280200410171450541000b450440410041f0b1a10241b304410310"
+"00000b20010bb00201027f02402002210420002001460d0020002001490440200141077120004107714604400340200041077104402004450d04200441016b21042000220241016a21002001220341016a2101200220032d00003a00000c010b0b034020"
+"0441084f044020002001290300370300200441086b2104200041086a2100200141086a21010c010b0b0b0340200404402000220241016a21002001220341016a2101200220032d00003a0000200441016b21040c010b0b05200141077120004107714604"
+"400340200020046a41077104402004450d04200441016b220420006a200120046a2d00003a00000c010b0b0340200441084f0440200441086b220420006a200120046a2903003703000c010b0b0b034020040440200441016b220420006a200120046a2d"
+"00003a00000c010b0b0b0b0b1500200120012802004101723602002000200110020b2f00200020021008220241046a200141046a2001280200417c71100b200141bcb2a1024f044020002001100c0b20020be00101077f200141ecffffff034b044041f0"
+"b0a10241b0b1a10241a002411e1000000b200041106b2100230045044010040b200141106a2102200041bcb2a10249044023002000100a2002100d2100050240230021032000100a2100024020021005220520002802002206417c7122044d0d00200041"
+"046a2000280200417c716a2207280200220841017104402005200441046a2008417c716a22044d0440200320071001200020042006410371723602000c020b0b200320002002100d21000c010b20032000200510070b0b200041046a220041046b200136"
+"0210200041106a0b6701027f200041bcb2a1024b0440200041146b2201280204220241808080807f71200241016a41808080807f71470440410041b0b1a10241ed0041031000000b2001200241016a36020420012802004101710440410041b0b1a10241"
+"f000410e1000000b0b20000b1400200041bcb2a1024b0440200041146b102b0b0b7101027f200041146b28021041017622022103200120024f0440417f0f0b41012003200141016a46200020014101746a2f010022024180f803714180b003471b044020"
+"020f0b200020014101746a2f010222004180f803714180b80347044020020f0b20002002410a746a4180c880656a0ba801002000200028020820002802046a360208200041013602042000280208230341146b2802104101764e04402000410036020020"
+"0041003602042000417f36020c2000230341146b28021041017636020805200023032000280208101136020c2000027f02400240024002400240200028020c4101742f010041ff017141016b0e050102030304000b41100c040b41040c030b41010c020b"
+"41080c010b41020b3602000b2000100f0b6601017f2000100f21002303200028020841026a1011b844000000000000f87f62047f2303200028020841016a1011412d46047f230320002802081011412d460541000b0541000b047f200041103602002000"
+"410236020441010541000b21012000101020010b1c01017f2301220141016a240120014102744180b0176a20003602000b8a0101037f2000100f220328020820032802106b22004103744101722104027f20004100472202047f200041ff9f024b220004"
+"7f200005200141ff9f024b0b0541000b0440027f2003410010154101210441000b21020b20020b41027420014100474101747220012002410f6c41036a747220047210142003200328020820032802046a360210200310100b6a01017f2000100f210020"
+"01100f22012802004101710440200010102001101041000f0b2002047f2000100f21022001100f220328020041027104402002200228020410150b20021012101020021010200310102000101020011010410105200010102001101041000b0b2e002000"
+"100f210003402000280200410146047f41010520002802004108460b04402000101210100c010b0b20000b6601027f20002802004104460440230341146b280210410176210220002802082101200041013602040340200141016a2201200248047f2303"
+"200110114101742f01004108764106710541000b04402000200028020441016a3602040c010b0b41010f0b41000b20002000100f21000340200028020041084604402000101210100c010b0b20000b6601027f20002802004102460440230341146b2802"
+"10410176210220002802082101200041013602040340200141016a2201200248047f2303200110114101742f01004108764104710541000b04402000200028020441016a3602040c010b0b41010f0b41000b27002000100f220028020041027104402001"
+"41ffff007141027420024110747210140b200010100b2801017f23024194c0024f04400f0b2302220141016a240220014102744180b097026a20003602000b8c0101037f2000100f21032001100f21002002047f20002802004101710541010b04402003"
+"100f21022000100f2201280200410171047f41000520012802004102710b04402002100f21042001100f22052005280200417e714101723602002004280208101c20041010200510100b2002101020011010200310102000101041000f0b200310102000"
+"101041010bbb0101017f2000100f22002001100f2201200028020c412446047f410105200028020c41df00460b047f410105200010180b10160440200141223602040b034020012802044122460440024020001019101020002001200028020c41df0046"
+"047f410105200028020c4124460b047f410105200010180b047f4101052000101a0b1016047f200141024114101b2001412236020441010541000b450d000c020b0b0b200020012001280204412246101d2102200010102001101020020bcb0101037f20"
+"00100f22002001100f2201200028020c41dc0046101604402000101710102000100f22022001100f22032002280200411046047f410105200210180b047f4101052002101a0b101604402003411d3602040b200220032003280204411d46101d21042002"
+"10102003101020040440200141024100101b2001411e3602040b05200020012000280200411046047f410105200010180b047f4101052000101a0b101604402001411e3602040b0b200020012001280204411e46101d2102200010102001101020020b8b"
+"0201027f2000100f22022001100f2201101f0440200141014115101b200141203602040b034020012802044120460440024020021019101020021013047f410105027f02402002100f220328020c22004120480d00200041c00048044020031010410120"
+"0041206b744184c100714100470c0205200041e0004804400c02052000418001480d020b0b2003101041000c010b2003101041000b0b047f41010520022802004101460b0d002002280200411046047f410105200210180b047f4101052002101a0b047f"
+"20022001101f047f200141024114101b2001412036020441010541000b0541000b450d000c020b0b0b200220012001280204412046101d2100200210102001101020000b4f01017f2000100f22022001100f220020022802004101461016044020004119"
+"360204052002200010200440200041193602040b0b200220002000280204411946101d2101200210102000101020010bb10101017f2000100f22022001100f220110210440200141014115101b2001411b3602040b03402001280204411b460440024020"
+"0210191010200228020c4127460d002002280200410146047f41010520022802004110460b047f410105200210180b047f4101052002101a0b047f200220011021047f200141024114101b2001411b36020441010541000b0541000b450d000c020b0b0b"
+"200220012001280204411b46101d2100200210102001101020000bb10101017f2000100f22022001100f220110210440200141014115101b2001411a3602040b03402001280204411a4604400240200210191010200228020c4122460d00200228020041"
+"0146047f41010520022802004110460b047f410105200210180b047f4101052002101a0b047f200220011021047f200141024114101b2001411a36020441010541000b0541000b450d000c020b0b0b200220012001280204411a46101d21002002101020"
+"01101020000bb30101017f2000100f22002001100f2201200028020c41274610160440200010191010200020011022044020001017101020002001200028020c41274610160440200141034116101b2001411c3602040b0b0520002001200028020c4122"
+"4610160440200010191010200020011023044020001017101020002001200028020c41224610160440200141034116101b2001411c3602040b0b0b0b200020012001280204411c46101d2102200010102001101020020b920101017f2000100f21002001"
+"100f2101200028020c412746047f410105200028020c4122460b044020002001102404402001410b3602040b0520001017101020002001102004402000101910102000200120002802004101461016044020014102410d101b0520014101410d101b0b20"
+"01410b3602040b0b200020012001280204410b46101d2102200010102001101020020b6e01017f2000100f22022001100f2200200228020c413d46101604402002101710102002200010250440200041024105101b200041063602040b05200220001025"
+"0440200041014106101b200041063602040b0b200220002000280204410646101d2101200210102000101020010b840201047f2000100f220021042001100f220121052000100f21022303200228020841016a1011412d46047f23032002280208101141"
+"2d460541000b047f200241103602002002410236020441010541000b210320021010200420052003101604402000101710102000100f22032001100f2202101e04402002410a3602040b200320022002280204410a46101d210420031010200210102004"
+"04402000101710102000101a047f410105200010180b047f41010520002802004110460b04402000200110260440200141034109101b200141083602040b0520014102410a101b200141083602040b0b0b200020012001280204410846101d2102200010"
+"102001101020020bbf0101037f2000100f22002001100f2201200028020c412d46101604402000101710102000100f22032001100f2202101e0440200241213602040b200320022002280204412146101d21042003101020021010200404402000101710"
+"102000101a047f410105200010180b047f41010520002802004110460b04402000200110260440200141034107101b200141073602040b05200141024108101b200141073602040b0b0b200020012001280204410746101d210220001010200110102002"
+"0bc20101037f2000100f21022001100f21002002101304402002200010270440200041053602040b05200228020c412d4604402002200010280440200041053602040b052002100f22032000100f22011025044020031019101020032001200328020041"
+"01461016044020014102410b101b0520014101410c101b0b200141093602040b200320012001280204410946101d2104200310102001101020040440200041053602040b0b0b200220002000280204410546101d2101200210102000101020010bc30301"
+"077f2000100f22072200230322014704402000100f2100200110100b20002403411441031009100f2201410036020020014100360204200141003602082001410036020c2001410036021020014100360200200141003602042001410036020820014100"
+"36020c20014100360210410841041009100f2203410036020020034100360204200341023602002003417f36020420032003280200417d7141027236020020011012101041002402410024012001100f21062003100f21052006100f22042005100f2202"
+"10290440200241014102101b200241023602040b034020022802044102460440024020041017101020041013047f4101052004101a0b047f410105200410180b047f41010520042802004110460b047f200420021029047f200241024101101b20024102"
+"36020441010541000b0541000b450d000c020b0b0b200420022002280204410246101d2100200410102002101020000440200541014103101b200541014104101b200541003602040b20062005200528020445101d1a2006101020051010410010144100"
+"101c2003280200410171047f4101052001280208230341146b280210410176480b210020011010200310102007101020000bbe0101027f2000280204220241ffffffff0071210120002802004101710440410041b0b1a10241fa00410e1000000b200141"
+"01460440024002400240200041146a220141086b2802000e050202000202010b200128020022010440200141bcb2a1024f0440200141146b102b0b0b0c010b000b2002418080808078710440410041b0b1a10241fe0041121000000b23002000100c0520"
+"01450440410041b0b1a10241880141101000000b2000200141016b200241808080807f71723602040b0b0bed01040041dcb0a1020b3c280000000100000000000000010000002800000061006c006c006f0063006100740069006f006e00200074006f00"
+"6f0020006c00610072006700650000419cb1a1020b321e0000000100000000000000010000001e0000007e006c00690062002f00720074002f0070007500720065002e00740073000041dcb1a1020b321e0000000100000000000000010000001e000000"
+"7e006c00690062002f00720074002f0074006c00730066002e0074007300004190b2a1020b2c0500000020000000000000002000000000000000200000000000000020000000000000002000000000000000"),
{ recognizer } = loadWASM(data, shared_memory);

const fns = [(e,sym)=>sym[sym.length-1], 
(env, sym, pos)=>( ([...sym[0],sym[1]]))/*0*/
,(env, sym, pos)=>( [sym[0]])/*1*/
,(env, sym, pos)=>( sym[0].flat().map(({key,val})=>[key,val]))/*2*/
,(env, sym, pos)=>( (Object.assign(Object.fromEntries(sym[0].map(([key,val],i)=>[key,{index:i,val:val||true}])),{__array__:sym[0]})))/*3*/
,(env, sym, pos)=>( {e:!!sym[0],v:sym[1]})/*4*/
,(env, sym, pos)=>( {e:!!null,v:sym[0]})/*5*/
,(env, sym, pos)=>( (env,sym[1].split("").flatMap((v,i,r)=>((i==r.length-1)?(sym[2])?(!!(typeof env.data[v]=="string"?env.data[env.data[v]]:env.data[v])||(sym[2].e))?{key:v,val:sym[2].v}:[{key:v,val:true},{key:sym[2].v}]:{key:v}:{key:v}))))/*6*/
,(env, sym, pos)=>( (env,sym[1].split("").flatMap((v,i,r)=>((i==r.length-1)?(null)?(!!(typeof env.data[v]=="string"?env.data[env.data[v]]:env.data[v])||(null.e))?{key:v,val:null.v}:[{key:v,val:true},{key:null.v}]:{key:v}:{key:v}))))/*7*/
,(env, sym, pos)=>( (sym[2])?(!!(typeof env.data[sym[1]]=="string"?env.data[env.data[sym[1]]]:env.data[sym[1]])||sym[2].e)?{key:sym[1],val:sym[2].v}:[{key:sym[1],val:true},{key:sym[2].v,val:true}]:{key:sym[1]})/*8*/
,(env, sym, pos)=>( (null)?(!!(typeof env.data[sym[1]]=="string"?env.data[env.data[sym[1]]]:env.data[sym[1]])||null.e)?{key:sym[1]}:[{key:sym[1],val:true},{key:null.v,val:true}]:{key:sym[1]})/*9*/
,(env, sym, pos)=>( {key:sym[0]+sym[1],val:null})/*10*/
,(env, sym, pos)=>( {key:sym[0],val:null})/*11*/
,(env, sym, pos)=>( sym[0])/*12*/
,(env, sym, pos)=>( {val:parseFloat(sym[0]),type:"hex",original_val:sym[0]})/*13*/
,(env, sym, pos)=>( {val:parseFloat(sym[0]),type:"bin",original_val:sym[0]})/*14*/
,(env, sym, pos)=>( {val:parseFloat(sym[0]),type:"oct",original_val:sym[0]})/*15*/
,(env, sym, pos)=>( {val:parseFloat(sym[0]),type:"sci",original_val:sym[0]})/*16*/
,(env, sym, pos)=>( {val:parseFloat(sym[0]),type:"flt",original_val:sym[0]})/*17*/
,(env, sym, pos)=>( {val:parseFloat(sym[0]),type:"int",original_val:sym[0]})/*18*/
,(env, sym, pos)=>( sym[0]+sym[1])/*19*/
,(env, sym, pos)=>( sym[0]+"")/*20*/
,(env, sym, pos)=>( sym[1])/*21*/]; 

export default function (str, env = {}) {
        
        const 
            FAILED = recognizer(str), // call with pointers
            stack = [];
    
        let action_length = 0,
            error_message ="",
            review_stack = [];
    
        if (FAILED) {

            for(let i = debug_stack.length-1, j=0; i >= 0; i--){
                if(!debug_stack[i].FAILED && j++ > 80)
                    break;
                review_stack.push(debug_stack[i]);
            }

            review_stack.reverse();
            
            let error_off = 10000000000000;
            let error_set = false;


            const lexer = new Lexer(str);

            for (let i = 0; i < error_array.length; i++) {
                if(error_array[i]>0 ){
                    if(!error_set){
                        error_set = true;
                        error_off = 0;
                    }
                    error_off = Math.max(error_off, error_array[i]);
                }
            }

            if(error_off == 10000000000000) 
                error_off = 0;

            while (lexer.off < error_off && !lexer.END) lexer.next();

            error_message = lexer.errorMessage(`Unexpected token[${ lexer.tx }]`);

    
        } else {

            let offset = 0, pos = [];

            for (const action of action_array) {

                action_length++;
                
                if (action == 0) break;

                switch (action & 1) {
                    case 0: //REDUCE;
                        {
                            const
                                DO_NOT_PUSH_TO_STACK = (action >> 1) & 1,
                                body = action >> 16,
                                len = ((action >> 2) & 0x3FFF);

                            const pos_a = pos[pos.length - len] || {off:0,tl:0};
                            const pos_b = pos[pos.length - 1 ] || {off:0,tl:0};
                            pos[stack.length - len] = { off: pos_a.off, tl: pos_b.off - pos_a.off  + pos_b.tl };

                            stack[stack.length - len] = fns[body](env, stack.slice(-len), { off: pos_a.off, tl: pos_b.off - pos_a.off  + pos_b.tl });

                            if (!DO_NOT_PUSH_TO_STACK) {
                                stack.length = stack.length - len + 1;
                                pos.length = pos.length - len + 1;
                            } else {
                                stack.length = stack.length - len;
                                pos.length = pos.length - len;
                            }

                        } break;

                    case 1: { //SHIFT;
                        const
                            has_len = (action >>> 1) & 1,
                            has_skip = (action >>> 2) & 1,
                            len = action >>> (3 + (has_skip * 15)),
                            skip = has_skip * ((action >>> 3) & (~(has_len * 0xFFFF8000)));
                        offset += skip;
                        if (has_len) {
                            stack.push(str.slice(offset, offset + len));
                            pos.push({ off: offset, tl: len });
                            offset += len;
                        }else {
                            stack.push("");
                            pos.push({ off: offset, tl: 0 });
                        }
                    } break;
                }
            }
        }
    
        return { result: stack, FAILED: !!FAILED, action_length, error_message, review_stack };
    }