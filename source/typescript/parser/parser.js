import {buildParserMemoryBuffer, loadWASM }  from "@candlefw/hydrocarbon";        
import Lexer from "@candlefw/wind"; 

const debug_stack = [];
const { shared_memory, action_array, error_array } = buildParserMemoryBuffer(false, 4194304, 163920);

const data = (str=>{const out = new Uint8Array(str.length>>1); for(let i = 0; i < str.length; i+=2) {out[i>>1] = parseInt(str.slice(i, i+2),16);} return out; })(
"0061736d01000000012c0860017f017f60027f7f017f60017f0060027f7f0060037f7f7f0060037f7f7f017f60000060047f7f7f7f00021c0203656e760561626f7274000703656e76066d656d6f72790201496403302f03030406000104010100030501"
+"00020001000000000100000002030500000004020501000101010101010101010002061d057f0141000b7f0141000b7f0141000b7f0141000b7f004190b2a1020b074807066d656d6f72790200055f5f6e65770009075f5f72656e6577000d085f5f7265"
+"7461696e000e095f5f72656c65617365000f0b5f5f727474695f626173650304046d61696e002e0af2312f9b0201047f20012802002202410171450440410041f0b1a102419002410e1000000b2002417c71220241fcffffff034941002002410c4f1b45"
+"0440410041f0b1a102419202410e1000000b200241800249044020024104762102052002411f2002676b220341046b764110732102200341076b21030b2002411049410020034117491b450440410041f0b1a102419f02410e1000000b20012802082104"
+"200128020422050440200520043602080b20040440200420053602040b20012000200220034104746a4102746a2802604604402000200220034104746a4102746a20043602602004450440200020034102746a2204280204417e20027771210120042001"
+"360204200145044020002000280200417e200377713602000b0b0b0b8b0401077f2001450440410041f0b1a10241c801410e1000000b20012802002204410171450440410041f0b1a10241ca01410e1000000b200141046a2001280200417c716a220528"
+"0200220241017104402004417c7141046a2002417c716a220341fcffffff03490440027f200020051001200120032004410371722204360200200141046a2001280200417c716a22052802000b21020b0b20044102710440027f200141046b2802002203"
+"2802002207410171450440410041f0b1a10241df0141101000000b2007417c7141046a2004417c716a220841fcffffff0349047f20002003100120032008200741037172220436020020030520010b0b21010b200520024102723602002004417c712203"
+"41fcffffff034941002003410c4f1b450440410041f0b1a10241ee01410e1000000b20052003200141046a6a470440410041f0b1a10241ef01410e1000000b200541046b2001360200200341800249044020034104762103052003411f2003676b220441"
+"046b764110732103200441076b21060b2003411049410020064117491b450440410041f0b1a10241ff01410e1000000b2000200320064104746a4102746a2802602104200141003602042001200436020820040440200420013602040b20002003200641"
+"04746a4102746a200136026020002000280200410120067472360200200020064102746a220020002802044101200374723602040bda0101027f200120024b0440410041f0b1a10241fc02410e1000000b200141136a41707141046b2101200241707121"
+"0320002802a00c220204402001200241046a490440410041f0b1a10241830341101000000b2002200141106b460440027f20022802002104200141106b0b21010b052001200041a40c6a490440410041f0b1a10241900341051000000b0b200320016b22"
+"0241144904400f0b20012004410271200241086b22024101727236020020014100360204200141003602082002200141046a6a22024102360200200020023602a00c2000200110020b9f0101027f3f00220041c90048047f41c90020006b400041004805"
+"41000b0440000b41c0b2a102410036020041e0bea1024100360200034020014117490440200141027441c0b2a1026a410036020441002100034020004110490440200020014104746a41027441c0b2a1026a4100360260200041016a21000c010b0b2001"
+"41016a21010c010b0b41c0b2a10241e4bea1023f00411074100341c0b2a10224000b3300200041fcffffff034f044041f0b0a10241f0b1a10241cd03411e1000000b410c200041136a41707141046b2000410c4d1b0be00101017f200141800249044020"
+"01410476210105411f20014101411b2001676b746a41016b2001200141feffffff01491b2201676b21022001200241046b764110732101200241076b21020b2001411049410020024117491b450440410041f0b1a10241cd02410e1000000b2000200241"
+"02746a280204417f200174712201047f200020016820024104746a4102746a280260052000280200417f200241016a74712201047f200020016822014102746a2802042202450440410041f0b1a10241da0241121000000b200020026820014104746a41"
+"02746a2802600541000b0b0b8c0101027f20012802002103200241046a410f710440410041f0b1a10241e802410e1000000b2003417c7120026b220441104f0440200120022003410271723602002002200141046a6a2201200441046b41017236020020"
+"00200110020520012003417e71360200200141046a22002001280200417c716a20002001280200417c716a280200417d713602000b0bc60101027f20002001100522021006220145044041043f00220141107441046b20002802a00c477420024101411b"
+"2002676b7441016b6a2002200241feffffff01491b6a41ffff036a4180807c71411076210320012003200120034a1b40004100480440200340004100480440000b0b200020014110743f0041107410032000200210062201450440410041f0b1a10241f2"
+"0341101000000b0b20022001280200417c714b0440410041f0b1a10241f403410e1000000b200020011001200020012002100720010b6001027f200041ecffffff034b044041f0b0a10241b0b1a102419302411e1000000b200041106a21022300450440"
+"10040b23002002100841046a220341046b22024100360204200241003602082002200136020c20022000360210200341106a0b3a01017f200041046b21012000410f7145410020001b047f2001280200410171450541000b450440410041f0b1a10241b3"
+"0441031000000b20010b1500200120012802004101723602002000200110020b900101057f20002002100821062001280200417c712107200641046a2202200141046a2205470440200220054904400340200704402002220441016a2102200522034101"
+"6a2105200420032d00003a0000200741016b21070c010b0b050340200704402002200741016b22076a200520076a2d00003a00000c010b0b0b0b200141bcb2a1024f044020002001100b0b20060be00101077f200141ecffffff034b044041f0b0a10241"
+"b0b1a10241a002411e1000000b200041106b2100230045044010040b200141106a2102200041bcb2a10249044023002000100a2002100c2100050240230021032000100a2100024020021005220520002802002206417c7122044d0d00200041046a2000"
+"280200417c716a2207280200220841017104402005200441046a2008417c716a22044d0440200320071001200020042006410371723602000c020b0b200320002002100c21000c010b20032000200510070b0b200041046a220041046b20013602102000"
+"41106a0b6701027f200041bcb2a1024b0440200041146b2201280204220241808080807f71200241016a41808080807f71470440410041b0b1a10241ed0041031000000b2001200241016a36020420012802004101710440410041b0b1a10241f000410e"
+"1000000b0b20000b1400200041bcb2a1024b0440200041146b102f0b0b0d00200041146b2802104101760b6601017f20012000101022024f0440417f0f0b41012002200141016a46200020014101746a2f010022024180f803714180b003471b04402002"
+"0f0b200020014101746a2f010222004180f803714180b80347044020020f0b20002002410a746a4180c880656a0b9a01002000200028020820002802046a360208200041013602042000280208230310104e044020004100360200200041003602042000"
+"417f36020c20002303101036020805200023032000280208101136020c2000027f02400240024002400240200028020c4101742f010041ff017141016b0e050102030304000b41100c040b41040c030b41010c020b41080c010b41020b3602000b200010"
+"0e0b0a0020002802004101460b0a0020002802004108460b26002000100e2100034020001013047f410105200010140b044020001012100f0c010b0b20000b0e002303200120002802086a10110b5501017f2000100e220141021016b844000000000000"
+"f87f62047f200141011016412d46047f200141001016412d460541000b0541000b047f200141103602002001410236020441010541000b21002001100f20000b0a0020002802004101710b0d0020002802004102714100470b1c01017f2301220141016a"
+"240120014102744180b0176a20003602000b8a0101037f2000100e220328020820032802106b22004103744101722104027f20004100472202047f200041ff9f024b2200047f200005200141ff9f024b0b0541000b0440027f20034100101b4101210441"
+"000b21020b20020b41027420014100474101747220012002410f6c41036a7472200472101a2003200328020820032802046a3602102003100f0b6201017f2000100e21002001100e2201101804402000100f2001100f41000f0b2002047f2000100e2102"
+"2001100e22031019044020022002280204101b0b20021012100f2002100f2003100f2000100f2001100f4101052000100f2001100f41000b0b5f01027f2000280200410446044023031010210220002802082101200041013602040340200141016a2201"
+"200248047f2303200110114101742f01004108764106710541000b04402000200028020441016a3602040c010b0b41010f0b41000b1c002000100e2100034020001014044020001012100f0c010b0b20000b5f01027f2000280200410246044023031010"
+"210220002802082101200041013602040340200141016a2201200248047f2303200110114101742f01004108764104710541000b04402000200028020441016a3602040c010b0b41010f0b41000b23002000100e220010190440200141ffff0071410274"
+"200241107472101a0b2000100f0b2801017f23024194c0024f04400f0b2302220141016a240220014102744180b097026a20003602000b800101037f2000100e21032001100e21002002047f200010180541010b04402003100e21022000100e22011018"
+"047f410005200110190b04402002100e21042001100e22052005280200417e71410172360200200428020810212004100f2005100f0b2002100f2001100f2003100f2000100f41000f0b2003100f2000100f41010bbb0101017f2000100e22002001100e"
+"2201200028020c412446047f410105200028020c41df00460b047f4101052000101d0b101c0440200141223602040b03402001280204412246044002402000101e100f20002001200028020c41df0046047f410105200028020c4124460b047f41010520"
+"00101d0b047f4101052000101f0b101c047f20014102411410202001412236020441010541000b450d000c020b0b0b200020012001280204412246102221022000100f2001100f20020b0a0020002802004110460bc30101037f2000100e22002001100e"
+"2201200028020c41dc0046101c044020001015100f2000100e22022001100e220320021024047f4101052002101d0b047f4101052002101f0b101c04402003411d3602040b200220032003280204411d46102221042002100f2003100f20040440200141"
+"02410010202001411e3602040b052000200120001024047f4101052000101d0b047f4101052000101f0b101c04402001411e3602040b0b200020012001280204411e46102221022000100f2001100f20020bfe0101027f2000100e22022001100e220110"
+"2504402001410141151020200141203602040b03402001280204412046044002402002101e100f20021017047f410105027f02402002100e220328020c22004120480d00200041c0004804402003100f4101200041206b744184c100714100470c020520"
+"0041e00048200041800148720d010b2003100f41000c010b2003100f41000b0b047f410105200210130b0d0020021024047f4101052002101d0b047f4101052002101f0b047f200220011025047f20014102411410202001412036020441010541000b05"
+"41000b450d000c020b0b0b200220012001280204412046102221002002100f2001100f20000b4b01017f2000100e22022001100e220020021013101c044020004119360204052002200010260440200041193602040b0b20022000200028020441194610"
+"2221012002100f2000100f20010bf10301037f2000100e22042001100e2201200428020c412746101c04402004101e100f2004100e22022001100e22031027044020034101411510202003411b3602040b03402003280204411b46044002402002101e10"
+"0f200228020c4127460d0020021013047f410105200210240b047f4101052002101d0b047f4101052002101f0b047f200220031027047f20034102411410202003411b36020441010541000b0541000b450d000c020b0b0b200220032003280204411b46"
+"102221002002100f2003100f2000044020041015100f20042001200428020c412746101c044020014103411610202001411c3602040b0b0520042001200428020c412246101c04402004101e100f2004100e22022001100e220310270440200341014115"
+"10202003411a3602040b03402003280204411a46044002402002101e100f200228020c4122460d0020021013047f410105200210240b047f4101052002101d0b047f4101052002101f0b047f200220031027047f20034102411410202003411a36020441"
+"010541000b0541000b450d000c020b0b0b200220032003280204411a46102221002002100f2003100f2000044020041015100f20042001200428020c412246101c044020014103411610202001411c3602040b0b0b0b200420012001280204411c461022"
+"21002004100f2001100f20000b8e0101017f2000100e21002001100e2101200028020c412746047f410105200028020c4122460b044020002001102804402001410b3602040b0520001015100f20002001102604402000101e100f200020012000101310"
+"1c044020014102410d10200520014101410d10200b2001410b3602040b0b200020012001280204410b46102221022000100f2001100f20020b6e01017f2000100e22022001100e2200200228020c413d46101c044020021015100f200220001029044020"
+"00410241051020200041063602040b0520022000102904402000410141061020200041063602040b0b200220002000280204410646102221012002100f2000100f20010bf10101037f2000100e21002001100e21012000100e220241011016412d46047f"
+"200241001016412d460541000b047f200241103602002002410236020441010541000b21032002100f200020012003101c044020001015100f2000100e22032001100e2202102304402002410a3602040b200320022002280204410a4610222104200310"
+"0f2002100f2004044020001015100f2000101f047f4101052000101d0b047f410105200010240b044020002001102a04402001410341091020200141083602040b0520014102410a1020200141083602040b0b0b20002001200128020441084610222102"
+"2000100f2001100f20020bbb0101037f2000100e22002001100e2201200028020c412d46101c044020001015100f2000100e22032001100e220210230440200241213602040b200320022002280204412146102221042003100f2002100f200404402000"
+"1015100f2000101f047f4101052000101d0b047f410105200010240b044020002001102a04402001410341071020200141073602040b052001410241081020200141073602040b0b0b200020012001280204410746102221022000100f2001100f20020b"
+"be0101037f2000100e21022001100e210020021017044020022000102b0440200041053602040b05200228020c412d46044020022000102c0440200041053602040b052002100e22032000100e2201102904402003101e100f2003200120031013101c04"
+"4020014102410b10200520014101410c10200b200141093602040b200320012001280204410946102221042003100f2001100f20040440200041053602040b0b0b200220002000280204410546102221012002100f2000100f20010bba0301077f200010"
+"0e22072200230322014704402000100e21002001100f0b20002403411441031009100e2201410036020020014100360204200141003602082001410036020c200141003602102001410036020020014100360204200141003602082001410036020c2001"
+"4100360210410841041009100e2203410036020020034100360204200341023602002003417f36020420032003280200417d7141027236020020011012100f410024024100240120011015100f2001100e21062003100e21052006100e22042005100e22"
+"02102d04402002410141021020200241023602040b034020022802044102460440024020041015100f20041017047f4101052004101f0b047f4101052004101d0b047f410105200410240b047f20042002102d047f200241024101102020024102360204"
+"41010541000b0541000b450d000c020b0b0b200420022002280204410246102221002004100f2002100f2000044020054101410310202005410141041020200541003602040b2006200520052802044510221a2006100f2005100f4100101a4100102120"
+"031018047f410105200128020823031010480b21002001100f2003100f2007100f20000bbe0101027f2000280204220241ffffffff0071210120002802004101710440410041b0b1a10241fa00410e1000000b2001410146044002400240024020004114"
+"6a220141086b2802000e050202000202010b200128020022010440200141bcb2a1024f0440200141146b102f0b0b0c010b000b2002418080808078710440410041b0b1a10241fe0041121000000b23002000100b052001450440410041b0b1a102418801"
+"41101000000b2000200141016b200241808080807f71723602040b0b0bed01040041dcb0a1020b3c280000000100000000000000010000002800000061006c006c006f0063006100740069006f006e00200074006f006f0020006c006100720067006500"
+"00419cb1a1020b321e0000000100000000000000010000001e0000007e006c00690062002f00720074002f0070007500720065002e00740073000041dcb1a1020b321e0000000100000000000000010000001e0000007e006c00690062002f0072007400"
+"2f0074006c00730066002e0074007300004190b2a1020b2c0500000020000000000000002000000000000000200000000000000020000000000000002000000000000000"),
{ recognizer } = loadWASM(data, shared_memory);

const fns = [(e,sym)=>sym[sym.length-1], 
(env, sym, pos)=>( ([...sym[0],sym[1]]))/*0*/
,(env, sym, pos)=>( [sym[0]])/*1*/
,(env, sym, pos)=>( sym[0].flat().map(({key,val})=>[key,val]))/*2*/
,(env, sym, pos)=>( (Object.assign(Object.fromEntries(sym[0].map(([key,val],i)=>[key,{index:i,val:val||true}])),{__array__:sym[0]})))/*3*/
,(env, sym, pos)=>( {e:!!sym[0],v:sym[1]})/*4*/
,(env, sym, pos)=>( {e:!!null,v:sym[0]})/*5*/
,(env, sym, pos)=>( (env,sym[1].split("").flatMap((v,i,r)=>((i==r.length-1)?(sym[2])?(!!(typeof env.data[v]=="string"?env.data[env.data[v]]:env.data[v])||(sym[2].e))?{key:v,val:sym[2].v}:[{key:v,val:true},{key:sym[2].v}]:{key:v}:{key:v}))))/*6*/
,(env, sym, pos)=>( (env,sym[1].split("").flatMap((v,i,r)=>((i==r.length-1)?(null)?(!!(typeof env.data[v]=="string"?env.data[env.data[v]]:env.data[v])||(null.e))?{key:v,val:null.v}:[{key:v,val:true},{key:null.v}]:{key:v}:{key:v}))))/*7*/
,(env, sym, pos)=>( (sym[2])?(!!(typeof env.data[sym[1]]=="string"?env.data[env.data[sym[1]]]:env.data[sym[1]])||sym[2].e)?{key:sym[1],val:sym[2].v}:[{key:sym[1],val:true},{key:sym[2].v,val:true}]:{key:sym[1]})/*8*/
,(env, sym, pos)=>( (null)?(!!(typeof env.data[sym[1]]=="string"?env.data[env.data[sym[1]]]:env.data[sym[1]])||null.e)?{key:sym[1]}:[{key:sym[1],val:true},{key:null.v,val:true}]:{key:sym[1]})/*9*/
,(env, sym, pos)=>( {key:sym[0]+sym[1],val:null})/*10*/
,(env, sym, pos)=>( {key:sym[0],val:null})/*11*/
,(env, sym, pos)=>( sym[0])/*12*/
,(env, sym, pos)=>( {val:parseFloat(sym[0]),type:"hex",original_val:sym[0]})/*13*/
,(env, sym, pos)=>( {val:parseFloat(sym[0]),type:"bin",original_val:sym[0]})/*14*/
,(env, sym, pos)=>( {val:parseFloat(sym[0]),type:"oct",original_val:sym[0]})/*15*/
,(env, sym, pos)=>( {val:parseFloat(sym[0]),type:"sci",original_val:sym[0]})/*16*/
,(env, sym, pos)=>( {val:parseFloat(sym[0]),type:"flt",original_val:sym[0]})/*17*/
,(env, sym, pos)=>( {val:parseFloat(sym[0]),type:"int",original_val:sym[0]})/*18*/
,(env, sym, pos)=>( sym[0]+sym[1])/*19*/
,(env, sym, pos)=>( sym[0]+"")/*20*/
,(env, sym, pos)=>( sym[1])/*21*/]; 

export default function (str, env = {}) {
        
        const 
            FAILED = recognizer(str), // call with pointers
            stack = [];
    
        let action_length = 0,
            error_message ="",
            review_stack = [];
    
        if (FAILED) {

            for(let i = debug_stack.length-1, j=0; i >= 0; i--){
                if(!debug_stack[i].FAILED && j++ > 80)
                    break;
                review_stack.push(debug_stack[i]);
            }

            review_stack.reverse();

            if(review_stack.length > 0)
                console.log({review_stack})
            
            let error_off = 10000000000000;
            let error_set = false;


            const lexer = new Lexer(str);

            for (let i = 0; i < error_array.length; i++) {
                if(error_array[i]>0 ){
                    if(!error_set){
                        error_set = true;
                        error_off = 0;
                    }
                    error_off = Math.max(error_off, error_array[i]);
                }
            }

            if(error_off == 10000000000000) 
                error_off = 0;

            while (lexer.off < error_off && !lexer.END) lexer.next();

            error_message = lexer.errorMessage(`Unexpected token[${ lexer.tx }]`);

    
        } else {

            let offset = 0, pos = [];

            for (const action of action_array) {

                action_length++;
                
                if (action == 0) break;

                switch (action & 1) {
                    case 0: //REDUCE;
                        {
                            const
                                DO_NOT_PUSH_TO_STACK = (action >> 1) & 1,
                                body = action >> 16,
                                len = ((action >> 2) & 0x3FFF);

                            const pos_a = pos[pos.length - len] || {off:0,tl:0};
                            const pos_b = pos[pos.length - 1 ] || {off:0,tl:0};
                            pos[stack.length - len] = { off: pos_a.off, tl: pos_b.off - pos_a.off  + pos_b.tl };

                            stack[stack.length - len] = fns[body](env, stack.slice(-len), { off: pos_a.off, tl: pos_b.off - pos_a.off  + pos_b.tl });

                            if (!DO_NOT_PUSH_TO_STACK) {
                                stack.length = stack.length - len + 1;
                                pos.length = pos.length - len + 1;
                            } else {
                                stack.length = stack.length - len;
                                pos.length = pos.length - len;
                            }

                        } break;

                    case 1: { //SHIFT;
                        const
                            has_len = (action >>> 1) & 1,
                            has_skip = (action >>> 2) & 1,
                            len = action >>> (3 + (has_skip * 15)),
                            skip = has_skip * ((action >>> 3) & (~(has_len * 0xFFFF8000)));
                        offset += skip;
                        if (has_len) {
                            stack.push(str.slice(offset, offset + len));
                            pos.push({ off: offset, tl: len });
                            offset += len;
                        }else {
                            stack.push("");
                            pos.push({ off: offset, tl: 0 });
                        }
                    } break;
                }
            }
        }
    
        return { result: stack, FAILED: !!FAILED, action_length, error_message, review_stack };
    }